[workspace]
members = [
    "dominion_earth",
    "core_sim",
    "ai_planner",
]
resolver = "2"


[workspace.dependencies]
bevy = { version = "0.16", features = ["bevy_remote", "png"] }
bevy_ecs = "0.16"
bevy_brp_extras = "0.2.0"
bevy_save = { version = "2.0", features = ["reflect", "checkpoints"] }
serde = { version = "1.0", features = ["derive"] }
ron = "0.8"
serde_json = "1.0"
rand = "0.8"
rand_pcg = "0.3"
anyhow = "1.0"
thiserror = "1.0"
clap = { version = "4.5", features = ["derive"] }

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"  # Changed from 'true' - faster compile times with similar performance
panic = "abort"
opt-level = 3
incremental = false
debug = false

[profile.dev]
# Enable a small amount of optimization in the dev profile.
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

# This profile will be used for web builds if needed.
[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

# Optimize for build time in CI.
[profile.ci]
inherits = "dev"
opt-level = 0
debug = "line-tables-only"
codegen-units = 4

[profile.ci.package."*"]
opt-level = 0

# Workspace-level lints
[workspace.lints.rust]
# Mark `bevy_lint` as a valid `cfg`, as it is set when the Bevy linter runs.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(bevy_lint)"] }

[workspace.lints.clippy]
# Bevy supplies arguments to systems via dependency injection, so it's natural for systems to
# request more than 7 arguments, which would undesirably trigger this lint.
too_many_arguments = "allow"
# Queries may access many components, which would undesirably trigger this lint.
type_complexity = "allow"
# Make sure macros use their standard braces, such as `[]` for `bevy_ecs::children!`.
nonstandard_macro_braces = "warn"
